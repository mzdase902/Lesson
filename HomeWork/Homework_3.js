// Какое последнее значение выведет этот код? Почему?

// let i = 3;

// while (i) {
//   alert( i-- );
// }
alert ('Первое задание');

let i = 3;

while (i) {
  alert( i-- );
} 

// Ответ: 1
//____________

// let i = 0;
// while (++i < 5) alert( i );
alert ('Второе задание');

//1
let ia = 0;
while (++ia < 5) alert( ia );

//2
let ib = 0;
while (ib++ < 5) alert( ib );

// Ответ 1 : 1 2 3 4
// Ответ 2 : 1 2 3 4 5
//____________

alert ('Третье задание');

//При помощи цикла for выведите чётные числа от 2 до 10

for(let ic = 2; ic <= 10; ic = ic + 2){
    alert(ic);
}

//___________

alert ('Четвертое задание');

// Перепишите код, заменив цикл for на while, без изменения поведения цикла.

// for (let i = 0; i < 3; i++) {
//   alert( `number ${i}!` );
// }

let id = 0;
while (id < 3){
    id++
    alert( `number ${id}!` );
}

//____________

alert ('Пятое задание');

// Напишите цикл, который предлагает prompt ввести число, большее 100. Если посетитель ввёл другое число – попросить ввести ещё раз, и так далее.

// Цикл должен спрашивать число пока либо посетитель не введёт число, большее 100, либо не нажмёт кнопку Отмена (ESC).

// Предполагается, что посетитель вводит только числа. Предусматривать обработку нечисловых строк в этой задаче необязательно.
let ie = prompt('Введите число больше 100');

while (ie < 100){
    ie = prompt ('Введите число больше 100');
}

//____________

alert ('Шестое задание');

// Натуральное число, большее 1, называется простым, если оно ни на что не делится, кроме себя и 1.

// Другими словами, n > 1 – простое, если при его делении на любое число кроме 1 и n есть остаток.

// Например, 5 это простое число, оно не может быть разделено без остатка на 2, 3 и 4.

// Напишите код, который выводит все простые числа из интервала от 2 до n.

// Для n = 10 результат должен быть 2,3,5,7.

// P.S. Код также должен легко модифицироваться для любых других интервалов.

let n = 10;

numbers:

for (let a = 2; a <= n; a++){
    for (let b = 2; b < a; b++){
        if (a % b == 0){
            continue numbers;
        }
    }
    alert (a)
}


